// Package ouraring provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package ouraring

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// ActivitySummary defines model for ActivitySummary.
type ActivitySummary struct {
	Activity []struct {
		AverageMet             *float32   `json:"average_met,omitempty"`
		CalActive              *float32   `json:"cal_active,omitempty"`
		CalTotal               *float32   `json:"cal_total,omitempty"`
		Class5min              *string    `json:"class_5min,omitempty"`
		DailyMovement          *float32   `json:"daily_movement,omitempty"`
		DayEnd                 *string    `json:"day_end,omitempty"`
		DayStart               *string    `json:"day_start,omitempty"`
		High                   *float32   `json:"high,omitempty"`
		Inactive               *float32   `json:"inactive,omitempty"`
		InactivityAlerts       *float32   `json:"inactivity_alerts,omitempty"`
		Low                    *float32   `json:"low,omitempty"`
		Medium                 *float32   `json:"medium,omitempty"`
		Met1min                *[]float32 `json:"met_1min,omitempty"`
		MetMinHigh             *float32   `json:"met_min_high,omitempty"`
		MetMinInactive         *float32   `json:"met_min_inactive,omitempty"`
		MetMinLow              *float32   `json:"met_min_low,omitempty"`
		MetMinMedium           *float32   `json:"met_min_medium,omitempty"`
		NonWear                *float32   `json:"non_wear,omitempty"`
		Rest                   *float32   `json:"rest,omitempty"`
		RestModeState          *float32   `json:"rest_mode_state,omitempty"`
		Score                  *float32   `json:"score,omitempty"`
		ScoreMeetDailyTargets  *float32   `json:"score_meet_daily_targets,omitempty"`
		ScoreMoveEveryHour     *float32   `json:"score_move_every_hour,omitempty"`
		ScoreRecoveryTime      *float32   `json:"score_recovery_time,omitempty"`
		ScoreStayActive        *float32   `json:"score_stay_active,omitempty"`
		ScoreTrainingFrequency *float32   `json:"score_training_frequency,omitempty"`
		ScoreTrainingVolume    *float32   `json:"score_training_volume,omitempty"`
		Steps                  *float32   `json:"steps,omitempty"`
		SummaryDate            *string    `json:"summary_date,omitempty"`
		TargetCalories         *float32   `json:"target_calories,omitempty"`
		TargetKm               *float32   `json:"target_km,omitempty"`
		TargetMiles            *float32   `json:"target_miles,omitempty"`
		Timezone               *float32   `json:"timezone,omitempty"`
		ToTargetKm             *float32   `json:"to_target_km,omitempty"`
		ToTargetMiles          *float32   `json:"to_target_miles,omitempty"`
		Total                  *float32   `json:"total,omitempty"`
	} `json:"activity"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// PersonalInfo defines model for PersonalInfo.
type PersonalInfo struct {
	Age    int    `json:"age"`
	Email  string `json:"email"`
	Gender string `json:"gender"`
	Weight int    `json:"weight"`
}

// SleepSummary defines model for SleepSummary.
type SleepSummary struct {
	Sleep []struct {
		Awake                     *float32   `json:"awake,omitempty"`
		BedtimeEnd                *string    `json:"bedtime_end,omitempty"`
		BedtimeEndDelta           *float32   `json:"bedtime_end_delta,omitempty"`
		BedtimeStart              *string    `json:"bedtime_start,omitempty"`
		BedtimeStartDelta         *float32   `json:"bedtime_start_delta,omitempty"`
		BreathAverage             *float32   `json:"breath_average,omitempty"`
		Deep                      *float32   `json:"deep,omitempty"`
		Duration                  *float32   `json:"duration,omitempty"`
		Efficiency                *float32   `json:"efficiency,omitempty"`
		Hr5min                    *[]float32 `json:"hr_5min,omitempty"`
		HrAverage                 *float32   `json:"hr_average,omitempty"`
		HrLowest                  *float32   `json:"hr_lowest,omitempty"`
		Hypnogram5min             *string    `json:"hypnogram_5min,omitempty"`
		IsLongest                 *float32   `json:"is_longest,omitempty"`
		Light                     *float32   `json:"light,omitempty"`
		MidpointAtDelta           *float32   `json:"midpoint_at_delta,omitempty"`
		MidpointTime              *float32   `json:"midpoint_time,omitempty"`
		OnsetLatency              *float32   `json:"onset_latency,omitempty"`
		PeriodId                  *float32   `json:"period_id,omitempty"`
		Rem                       *float32   `json:"rem,omitempty"`
		Restless                  *float32   `json:"restless,omitempty"`
		Rmssd                     *float32   `json:"rmssd,omitempty"`
		Rmssd5min                 *[]float32 `json:"rmssd_5min,omitempty"`
		Score                     *float32   `json:"score,omitempty"`
		ScoreAlignment            *float32   `json:"score_alignment,omitempty"`
		ScoreDeep                 *float32   `json:"score_deep,omitempty"`
		ScoreDisturbances         *float32   `json:"score_disturbances,omitempty"`
		ScoreEfficiency           *float32   `json:"score_efficiency",omitempty"`
		ScoreLatency              *float32   `json:"score_latency,omitempty"`
		ScoreRem                  *float32   `json:"score_rem,omitempty"`
		ScoreTotal                *float32   `json:"score_total,omitempty"`
		SummaryDate               *string    `json:"summary_date,omitempty"`
		TemperatureDelta          *float32   `json:"temperature_delta,omitempty"`
		TemperatureDeviation      *float32   `json:"temperature_deviation,omitempty"`
		TemperatureTrendDeviation *float32   `json:"temperature_trend_deviation"`
		Timezone                  *float32   `json:"timezone,omitempty"`
		Total                     *float32   `json:"total,omitempty"`
	} `json:"sleep"`
}

// ActivityParams defines parameters for Activity.
type ActivityParams struct {
	// The start date (inclusive)
	Start *string `json:"start,omitempty"`

	// The end date (inclusive)
	End *string `json:"end,omitempty"`
}

// SleepParams defines parameters for Sleep.
type SleepParams struct {
	// The start date (inclusive)
	Start *string `json:"start,omitempty"`

	// The end date (inclusive)
	End *string `json:"end,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Activity request
	Activity(ctx context.Context, params *ActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Sleep request
	Sleep(ctx context.Context, params *SleepParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Userinfo request
	Userinfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Activity(ctx context.Context, params *ActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Sleep(ctx context.Context, params *SleepParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSleepRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Userinfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserinfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewActivityRequest generates requests for Activity
func NewActivityRequest(server string, params *ActivityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSleepRequest generates requests for Sleep
func NewSleepRequest(server string, params *SleepParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sleep")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserinfoRequest generates requests for Userinfo
func NewUserinfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userinfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Activity request
	ActivityWithResponse(ctx context.Context, params *ActivityParams, reqEditors ...RequestEditorFn) (*ActivityResponse, error)

	// Sleep request
	SleepWithResponse(ctx context.Context, params *SleepParams, reqEditors ...RequestEditorFn) (*SleepResponse, error)

	// Userinfo request
	UserinfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserinfoResponse, error)
}

type ActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivitySummary
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SleepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SleepSummary
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r SleepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SleepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserinfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonalInfo
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UserinfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserinfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ActivityWithResponse request returning *ActivityResponse
func (c *ClientWithResponses) ActivityWithResponse(ctx context.Context, params *ActivityParams, reqEditors ...RequestEditorFn) (*ActivityResponse, error) {
	rsp, err := c.Activity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivityResponse(rsp)
}

// SleepWithResponse request returning *SleepResponse
func (c *ClientWithResponses) SleepWithResponse(ctx context.Context, params *SleepParams, reqEditors ...RequestEditorFn) (*SleepResponse, error) {
	rsp, err := c.Sleep(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSleepResponse(rsp)
}

// UserinfoWithResponse request returning *UserinfoResponse
func (c *ClientWithResponses) UserinfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserinfoResponse, error) {
	rsp, err := c.Userinfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserinfoResponse(rsp)
}

// ParseActivityResponse parses an HTTP response from a ActivityWithResponse call
func ParseActivityResponse(rsp *http.Response) (*ActivityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivitySummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSleepResponse parses an HTTP response from a SleepWithResponse call
func ParseSleepResponse(rsp *http.Response) (*SleepResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SleepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SleepSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUserinfoResponse parses an HTTP response from a UserinfoWithResponse call
func ParseUserinfoResponse(rsp *http.Response) (*UserinfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserinfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonalInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get activity summaries
	// (GET /activity)
	Activity(ctx echo.Context, params ActivityParams) error
	// Get sleep summaries
	// (GET /sleep)
	Sleep(ctx echo.Context, params SleepParams) error
	// Get personal information for the user
	// (GET /userinfo)
	Userinfo(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Activity converts echo context to params.
func (w *ServerInterfaceWrapper) Activity(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ActivityParams
	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Activity(ctx, params)
	return err
}

// Sleep converts echo context to params.
func (w *ServerInterfaceWrapper) Sleep(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SleepParams
	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Sleep(ctx, params)
	return err
}

// Userinfo converts echo context to params.
func (w *ServerInterfaceWrapper) Userinfo(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Userinfo(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/activity", wrapper.Activity)
	router.GET(baseURL+"/sleep", wrapper.Sleep)
	router.GET(baseURL+"/userinfo", wrapper.Userinfo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXS2/jNhD+KwbbQwsYcbKLXnTLoSgWPbTotqc0ICbSWOKGD2U4dKoG+e8FKcmPmFSy",
	"xRbYQ2+25uNw3t/wSdTO9M6iZS+qJ+HrDg2kn9c1q53i4WMwBmiIn3pyPRIrTACYAPG3YjQ+A9khQYvS",
	"IMe/PPQoKmGDuUMSz2tRg5ZJDRbF7Bh0XqrBe/mDUfZI7JmUbaO4AaUHadwODdr89Q0MEm1TOD5Iz0Cc",
	"lXaq7bIqlV3wZxIqHiRopDHkZyjtHrPfDTYqmIKI5dUUiH0qzlDTByCCYT5llJVFZ2bAolMzqGz2KF8w",
	"3zorHxEoKyT0XBRI4xqMeeK8cb52tCCRBpHlWCkM1GIhJRPY7VDiDmmQnQu0gCSsXcKxMkvXe4ZhqQFG",
	"FBMoq2wrt4QPAW09vAW8czqULmfsC46OzS6b04AeCn+MkqxBO5qa/LzORsy9WZIapUvHlcG/nc2bzk6+",
	"on4PWLihMFMOPeLuPmHN502Tyu4hKMJGVDeHEXibOfkjkaPzmVi7Jrm2dWSARSWU5ffvxF6Bsozt3Dre",
	"Q5tLxAs7ks4DPmfNr0jeWdAf7NZlBvXJLUcmoAGls5XQom2QsqJHVG3HOYUv49dGsyf4XuV8a86Njxqx",
	"L1KSj9IlPnqE+3xd3WET665IB0dy2aBmWNRSJo4TxJImQuBOTgSaZ6/J13NBIGDlbFaI262qVXGIdLRn",
	"1LcTSUeLhnYUyaE0xruht64lMGUqV15qZ9uSBv2i2o64RzW9U5YlLMV6jypOa2c9stTAxbj1SMo1UjUF",
	"qjJFCtPo81Em431TlvyLPL3GhqBVa4vb0ogpVt0kVp4D3YGtcYlKD1X4p1iALUV8ZlqzRIbF5fF1okPT",
	"IwGH5HOpdE5RO1Xuu2Mk0zhGjvA2aA13GkXFFHD92az4hQhtHKDngzdGDOtA8T0Qnwhjcq979TMO14HT",
	"+hirUTwEpEGshQWTbqlr9F6yu0d7oDhI58Tzc9qJRz5ixdF78UsgWP0Wk7AWOySf4iOuLi4vLlMn9mih",
	"V6IS79OnteiBu2TN5vhB0o4vDpdirpz90Ihq/6RJpwgMMpIX1c2TaNDXpPoxG+L3DldpQK9ieay+U7bW",
	"wasdfi/WWTfHeb+enk9Zvs7dgbZ56w2Rl5b036Zh0sdBlYLx7vJyXDYsT/0Mfa9VnYKx+eTHqjvo+5Zw",
	"KyrxzebwHtxMj8HNy5dgytupNzNk5WdMRGwhaP5iZoz7VObyYPGvHmvGZoUTZt/gohI/Ia/g1L64DkTQ",
	"Zr8wZOslLRv/F8tnZelkQcskK8m/1jLxR8btayR4pHlKZcvkjxnwH4b1ZH3PODfLV9GQ1dbRijtcRdO/",
	"thj3x5bGJ5By9oXBx3STOu6YaG5uY/16pN3cj4G0qETH3Ptqs4FeXbhAEGv9onZms7sSz7fP/wQAAP//",
	"4Z0nzOoSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

